{"ast":null,"code":"import { sampleProducts } from \"./Data\"; ///\n//\n// Methods of this class are used to simulate calls to server.\n//\n\nclass Api {\n  getItemUsingID(id) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let res = sampleProducts.filter(x => x.id === parseInt(id, 10));\n        resolve(res.length === 0 ? null : res[0]);\n      }, 500);\n    });\n  }\n\n  sortByPrice(data, sortval) {\n    if (sortval !== \"lh\" && sortval !== \"hl\") return data;\n    let items = [...data];\n\n    if (sortval === \"lh\") {\n      items.sort((a, b) => a.price - b.price);\n    } else {\n      items.sort((a, b) => b.price - a.price);\n    }\n\n    return items;\n  }\n\n  searchItems({\n    category = \"popular\",\n    term = \"\",\n    sortValue = \"lh\",\n    itemsPerPage = 10,\n    usePriceFilter = \"false\",\n    minPrice = 0,\n    maxPrice = 1000,\n    page = 1\n  }) {\n    // Turn this into a boolean\n    usePriceFilter = usePriceFilter === \"true\" && true;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let data = sampleProducts.filter(item => {\n          if (usePriceFilter && (item.price < minPrice || item.price > maxPrice)) {\n            return false;\n          }\n\n          if (category === \"popular\") {\n            return item.popular;\n          }\n\n          if (category !== \"All categories\" && category !== item.category) return false;\n          if (term && !item.name.toLowerCase().includes(term.toLowerCase())) return false;\n          return true;\n        });\n        let totalLength = data.length;\n        data = this.sortByPrice(data, sortValue);\n        data = data.slice((page - 1) * itemsPerPage, page * itemsPerPage);\n        resolve({\n          data,\n          totalLength\n        });\n      }, 500);\n    });\n  }\n\n}\n\nexport default new Api();","map":{"version":3,"sources":["D:/react/react js/online-shop/src/Api.js"],"names":["sampleProducts","Api","getItemUsingID","id","Promise","resolve","reject","setTimeout","res","filter","x","parseInt","length","sortByPrice","data","sortval","items","sort","a","b","price","searchItems","category","term","sortValue","itemsPerPage","usePriceFilter","minPrice","maxPrice","page","item","popular","name","toLowerCase","includes","totalLength","slice"],"mappings":"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","sourcesContent":["import { sampleProducts } from \"./Data\";\r\n\r\n///\r\n//\r\n// Methods of this class are used to simulate calls to server.\r\n//\r\nclass Api {\r\n  getItemUsingID(id) {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        let res = sampleProducts.filter(x => x.id === parseInt(id, 10));\r\n        resolve(res.length === 0 ? null : res[0]);\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  sortByPrice(data, sortval) {\r\n    if (sortval !== \"lh\" && sortval !== \"hl\") return data;\r\n\r\n    let items = [...data];\r\n\r\n    if (sortval === \"lh\") {\r\n      items.sort((a, b) => a.price - b.price);\r\n    } else {\r\n      items.sort((a, b) => b.price - a.price);\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  searchItems({\r\n    category = \"popular\",\r\n    term = \"\",\r\n    sortValue = \"lh\",\r\n    itemsPerPage = 10,\r\n    usePriceFilter = \"false\",\r\n    minPrice = 0,\r\n    maxPrice = 1000,\r\n    page = 1\r\n  }) {\r\n    // Turn this into a boolean\r\n    usePriceFilter = usePriceFilter === \"true\" && true;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        let data = sampleProducts.filter(item => {\r\n          if (\r\n            usePriceFilter &&\r\n            (item.price < minPrice || item.price > maxPrice)\r\n          ) {\r\n            return false;\r\n          }\r\n\r\n          if (category === \"popular\") {\r\n            return item.popular;\r\n          }\r\n\r\n          if (category !== \"All categories\" && category !== item.category)\r\n            return false;\r\n\r\n          if (term && !item.name.toLowerCase().includes(term.toLowerCase()))\r\n            return false;\r\n\r\n          return true;\r\n        });\r\n\r\n        let totalLength = data.length;\r\n\r\n        data = this.sortByPrice(data, sortValue);\r\n\r\n        data = data.slice((page - 1) * itemsPerPage, page * itemsPerPage);\r\n\r\n        resolve({ data, totalLength });\r\n      }, 500);\r\n    });\r\n  }\r\n}\r\n\r\nexport default new Api();\r\n"]},"metadata":{},"sourceType":"module"}