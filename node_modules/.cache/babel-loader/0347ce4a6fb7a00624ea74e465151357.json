{"ast":null,"code":"import _objectSpread from \"D:\\\\react\\\\react js\\\\online-shop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"D:\\\\react\\\\react js\\\\online-shop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\react\\\\react js\\\\online-shop\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"D:\\\\react\\\\react js\\\\online-shop\\\\src\\\\Components\\\\ProductList\\\\ProductList.js\";\nimport React, { Component } from \"react\";\nimport Item from \"../Item/Item\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport queryString from \"query-string\";\nimport Api from \"../../Api\";\nimport Paging from \"../Paging/Paging\";\nimport ProductsHeader from \"../ProductsHeader/ProductsHeader\"; // This component is responsible for fetching products.\n// It determines from query string which products to fetch.\n// The URL is checked on initial mount and when URL changes.\n\nclass ProductList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      totalItemsCount: null,\n      items: []\n    };\n    this.updateQueryStr = this.updateQueryStr.bind(this);\n  }\n\n  fetchData() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var qsAsObject, results;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.setState({\n              loading: true\n            }); // Parse the query string\n\n\n            qsAsObject = queryString.parse(_this.props.location.search);\n            _context.next = 4;\n            return Api.searchItems(qsAsObject);\n\n          case 4:\n            results = _context.sent;\n\n            _this.setState({\n              items: results.data,\n              loading: false,\n              totalItemsCount: results.totalLength\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  updateQueryStr(newValues) {\n    let current = queryString.parse(this.props.location.search);\n    this.props.history.push(\"/?\" + queryString.stringify(_objectSpread({}, current, {}, newValues)));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    let currentQueryStr = queryString.parse(this.props.location.search);\n    let oldQueryStr = queryString.parse(prevProps.location.search);\n\n    let areSameObjects = (a, b) => {\n      if (Object.keys(a).length !== Object.keys(b).length) return false;\n\n      for (let key in a) {\n        if (a[key] !== b[key]) return false;\n      }\n\n      return true;\n    }; // We will refetch products only when query string changes.\n\n\n    if (!areSameObjects(currentQueryStr, oldQueryStr)) {\n      this.fetchData();\n    }\n  }\n\n  render() {\n    let parsedQueryStr = queryString.parse(this.props.location.search);\n\n    if (this.state.loading) {\n      return React.createElement(CircularProgress, {\n        className: \"circular\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(ProductsHeader, {\n      parsedQueryStr: parsedQueryStr,\n      updateQueryStr: this.updateQueryStr,\n      totalItemsCount: this.state.totalItemsCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.state.items.map(item => {\n      return React.createElement(Item, {\n        key: item.id,\n        item: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    })), React.createElement(Paging, {\n      parsedQueryStr: parsedQueryStr,\n      updateQueryStr: this.updateQueryStr,\n      totalItemsCount: this.state.totalItemsCount,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ProductList;","map":{"version":3,"sources":["D:/react/react js/online-shop/src/Components/ProductList/ProductList.js"],"names":["React","Component","Item","CircularProgress","queryString","Api","Paging","ProductsHeader","ProductList","constructor","props","state","loading","totalItemsCount","items","updateQueryStr","bind","fetchData","setState","qsAsObject","parse","location","search","searchItems","results","data","totalLength","componentDidMount","newValues","current","history","push","stringify","componentDidUpdate","prevProps","prevState","snapshot","currentQueryStr","oldQueryStr","areSameObjects","a","b","Object","keys","length","key","render","parsedQueryStr","height","display","flexDirection","flex","map","item","id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Item from \"../Item/Item\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport queryString from \"query-string\";\r\nimport Api from \"../../Api\";\r\nimport Paging from \"../Paging/Paging\";\r\nimport ProductsHeader from \"../ProductsHeader/ProductsHeader\";\r\n\r\n// This component is responsible for fetching products.\r\n// It determines from query string which products to fetch.\r\n// The URL is checked on initial mount and when URL changes.\r\nclass ProductList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: false,\r\n      totalItemsCount: null,\r\n      items: []\r\n    };\r\n    this.updateQueryStr = this.updateQueryStr.bind(this);\r\n  }\r\n\r\n  async fetchData() {\r\n    this.setState({ loading: true });\r\n\r\n    // Parse the query string\r\n    let qsAsObject = queryString.parse(this.props.location.search);\r\n\r\n    let results = await Api.searchItems(qsAsObject);\r\n\r\n    this.setState({\r\n      items: results.data,\r\n      loading: false,\r\n      totalItemsCount: results.totalLength\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  updateQueryStr(newValues) {\r\n    let current = queryString.parse(this.props.location.search);\r\n    this.props.history.push(\r\n      \"/?\" + queryString.stringify({ ...current, ...newValues })\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    let currentQueryStr = queryString.parse(this.props.location.search);\r\n    let oldQueryStr = queryString.parse(prevProps.location.search);\r\n\r\n    let areSameObjects = (a, b) => {\r\n      if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n      for (let key in a) {\r\n        if (a[key] !== b[key]) return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    // We will refetch products only when query string changes.\r\n    if (!areSameObjects(currentQueryStr, oldQueryStr)) {\r\n      this.fetchData();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let parsedQueryStr = queryString.parse(this.props.location.search);\r\n\r\n    if (this.state.loading) {\r\n      return <CircularProgress className=\"circular\" />;\r\n    }\r\n\r\n    return (\r\n      <div style={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <ProductsHeader\r\n          parsedQueryStr={parsedQueryStr}\r\n          updateQueryStr={this.updateQueryStr}\r\n          totalItemsCount={this.state.totalItemsCount}\r\n        />\r\n\r\n        <div style={{ flex: 1 }}>\r\n          {this.state.items.map(item => {\r\n            return <Item key={item.id} item={item} />;\r\n          })}\r\n        </div>\r\n\r\n        <Paging\r\n          parsedQueryStr={parsedQueryStr}\r\n          updateQueryStr={this.updateQueryStr}\r\n          totalItemsCount={this.state.totalItemsCount}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductList;\r\n"]},"metadata":{},"sourceType":"module"}